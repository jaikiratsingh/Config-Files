{
	"competitive": {
	  "prefix": "xxx",
	  "body": [
		"#include <vector>",
		"#include <list>",
		"#include <map>",
		"#include <set>",
		"#include <deque>",
		"#include <queue>",
		"#include <stack>",
		"#include <numeric>",
		"#include <bitset>",
		"#include <algorithm>",
		"#include <functional>",
		"#include <numeric>",
		"#include <utility>",
		"#include <sstream>",
		"#include <complex>",
		"#include <iostream>",
		"#include <iomanip>",
		"#include <cstdio>",
		"#include <cmath>",
		"#include <cstdlib>",
		"#include <ctime>",
		"#include <cstring>",
		"#include <climits>",
		"#include <cassert>",
		"#include <iostream>",
		"#include  <unordered_set>",
		"#include <unordered_map>",
		"#include <ext/pb_ds/assoc_container.hpp>",
		"#include <ext/pb_ds/tree_policy.hpp>",
		"#define int long long",
		"#define pb push_back",
		"#define pii pair<int, int>",
		"#define mem1(a) memset(a,-1,sizeof(a))",
		"#define mem0(a) memset(a,0,sizeof(a))",
		"#define rep(i,a,b) for(int i=a;i<b;i++)",
		"#define INF (long long)1e15",
		"#define MAXN (int)1e6",
		"#define err 1e-15",
		"#define all(x) (x).begin(), (x).end()",
		"#define nline '\\n'",
		"using namespace std;",
		"using namespace __gnu_pbds;",
		"",
		"template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }",
		"template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }",
		"typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update > ordered_set; // find_by_order, order_of_key",
		"typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update > ordered_multiset; // find_by_order, order_of_key -- WARNING ----> LOWER_BOUND AND UPPER_BOUND DO NOT WORK AS EXPECTED, AND DO NOT TRY TO ERASE AS WELL. AVOID USING THIS",
		"void dbg_out() { cerr << endl; }",
		"template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }",
		"#ifdef LOCAL",
		"#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)",
		"#else",
		"#define dbg(...)",
		"#endif",
		"",
		"void init() {",
		"  ios_base::sync_with_stdio(false);  cin.tie(NULL);  cout.tie(NULL);",
		"}",
		"",
		"void solve() {",
		"  $1",
		"}",
		" ",
		"signed main() {",
		"  init();",
		"  solve();",
		"}"
	  ],
	  "description": "To start competitive file"
	},
	"With Test Case": {
	  "prefix": "tcs",
	  "body": [
		"#include <vector>",
		"#include <list>",
		"#include <map>",
		"#include <set>",
		"#include <deque>",
		"#include <queue>",
		"#include <stack>",
		"#include <numeric>",
		"#include <bitset>",
		"#include <algorithm>",
		"#include <functional>",
		"#include <numeric>",
		"#include <utility>",
		"#include <sstream>",
		"#include <complex>",
		"#include <iostream>",
		"#include <iomanip>",
		"#include <cstdio>",
		"#include <cmath>",
		"#include <cstdlib>",
		"#include <ctime>",
		"#include <cstring>",
		"#include <climits>",
		"#include <cassert>",
		"#include <iostream>",
		"#include  <unordered_set>",
		"#include <unordered_map>",
		"#include <ext/pb_ds/assoc_container.hpp>",
		"#include <ext/pb_ds/tree_policy.hpp>",
		"#define int long long",
		"#define pb push_back",
		"#define pii pair<int, int>",
		"#define mem1(a) memset(a,-1,sizeof(a))",
		"#define mem0(a) memset(a,0,sizeof(a))",
		"#define rep(i,a,b) for(int i=a;i<b;i++)",
		"#define INF (long long)1e15",
		"#define MAXN (int)1e6",
		"#define nline '\\n'",
		"#define err 1e-15",
		"#define all(x) (x).begin(), (x).end()",
		"using namespace std;",
		"using namespace __gnu_pbds;",
		"",
		"template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }",
		"template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }",

		"void dbg_out() { cerr << endl; }",
		"typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update > ordered_set; // find_by_order, order_of_key",
		"typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update > ordered_multiset; // find_by_order, order_of_key -- WARNING ----> LOWER_BOUND AND UPPER_BOUND DO NOT WORK AS EXPECTED, AND DO NOT TRY TO ERASE AS WELL. AVOID USING THIS",
		"template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }",
		"#ifdef LOCAL",
		"#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)",
		"#else",
		"#define dbg(...)",
		"#endif",
		"",
		"void init() {",
		"  ios_base::sync_with_stdio(false);  cin.tie(NULL);  cout.tie(NULL);",
		"}",
		"",
		"void solve() {",
		"  $1",
		"}",
		" ",
		"signed main() {",
		"  init();",
		"",
		"  int tc;",
		"  cin >> tc;",
		"",
		"  while(tc--) {",
		"    solve();",
		"  }",
		"  ",
		"}"
	  ],
	  "description": "With Test Case"
	},
	"Leet Code": {
		"prefix": "leetcode",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"$1",
			"",
			"int main() {",
			"",
			"  Solution *solution = new Solution;",
			"",
			"}"
		]
	}
  }
